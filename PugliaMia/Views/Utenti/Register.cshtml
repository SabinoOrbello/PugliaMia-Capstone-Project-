@model PugliaMia.Models.Utenti

<div class="container-fluid bgChisiamo9">
    <div class="container hero">
        <div class="row pt-5">
            <div class="text-center lh-4">
                <h1 class="text-white fw-bold titShop dancing">Lasciati travolgere</h1>
            </div>
        </div>
    </div>
</div>

@if (!String.IsNullOrEmpty(ViewBag.SuccessMessage))
{
    <div class="overlay">
        <div class="success-message">
            @ViewBag.SuccessMessage
            @Html.ActionLink("Vai alla Home", "Index", "Home", null, new { @class = "bottone" })
        </div>
    </div>
}

<div class="container text-center py-4">
    <h2 class="titPage">Effettua la Registrazione</h2>
    <hr class="border border-danger border-2 opacity-50 mb-4" />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


<div class="login-form">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" })
        <div class="text-center">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control mx-auto", placeholder = "Nome" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control mx-auto", placeholder = "Email" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
        <div class="input-group">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control mx-auto password-toggle", placeholder = "Password", type = "password" } })
            <div class="input-group-append">
               
            </div>
        </div>
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
    </div>






    <div class="form-group">
        <div>
            <input type="submit" value="Create" class="btn btn-primary btn-block" />
        </div>
    </div>
</div>

    }
</div>

<script>
    function togglePasswordVisibility(icon) {
        var passwordInput = icon.parentElement.parentElement.querySelector(".password-toggle");

        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            icon.innerHTML = '<i class="fa fa-eye-slash" aria-hidden="true"></i>';
        } else {
            passwordInput.type = "password";
            icon.innerHTML = '<i class="fa fa-eye" aria-hidden="true"></i>';
        }
    }
</script>